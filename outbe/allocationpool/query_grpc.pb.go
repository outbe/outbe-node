// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: outbe/allocationpool/query.proto

package allocationpool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                = "/outbe.allocationpool.Query/Params"
	Query_EmissionAll_FullMethodName           = "/outbe.allocationpool.Query/EmissionAll"
	Query_GetEmissionEntity_FullMethodName     = "/outbe.allocationpool.Query/GetEmissionEntity"
	Query_GetTotalBlockEmission_FullMethodName = "/outbe.allocationpool.Query/GetTotalBlockEmission"
	Query_GetEmission_FullMethodName           = "/outbe.allocationpool.Query/GetEmission"
	Query_GetDailyEmission_FullMethodName      = "/outbe.allocationpool.Query/GetDailyEmission"
	Query_GetLimit_FullMethodName              = "/outbe.allocationpool.Query/GetLimit"
	Query_GetTributes_FullMethodName           = "/outbe.allocationpool.Query/GetTributes"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	EmissionAll(ctx context.Context, in *QueryAllEmissionRequest, opts ...grpc.CallOption) (*QueryAllEmissionResponse, error)
	GetEmissionEntity(ctx context.Context, in *QueryEmissionEntityRequest, opts ...grpc.CallOption) (*QueryEmissionEntityResponse, error)
	GetTotalBlockEmission(ctx context.Context, in *QueryTotalBlockEmissionRequest, opts ...grpc.CallOption) (*QueryTotalBlockEmissionResponse, error)
	GetEmission(ctx context.Context, in *QueryEmissionRequest, opts ...grpc.CallOption) (*QueryEmissionResponse, error)
	GetDailyEmission(ctx context.Context, in *QueryDailyEmissionRequest, opts ...grpc.CallOption) (*QueryDailyEmissionResponse, error)
	GetLimit(ctx context.Context, in *QueryLimitRequest, opts ...grpc.CallOption) (*QueryLimitResponse, error)
	GetTributes(ctx context.Context, in *QueryTributesRequest, opts ...grpc.CallOption) (*QueryTributesResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EmissionAll(ctx context.Context, in *QueryAllEmissionRequest, opts ...grpc.CallOption) (*QueryAllEmissionResponse, error) {
	out := new(QueryAllEmissionResponse)
	err := c.cc.Invoke(ctx, Query_EmissionAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEmissionEntity(ctx context.Context, in *QueryEmissionEntityRequest, opts ...grpc.CallOption) (*QueryEmissionEntityResponse, error) {
	out := new(QueryEmissionEntityResponse)
	err := c.cc.Invoke(ctx, Query_GetEmissionEntity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTotalBlockEmission(ctx context.Context, in *QueryTotalBlockEmissionRequest, opts ...grpc.CallOption) (*QueryTotalBlockEmissionResponse, error) {
	out := new(QueryTotalBlockEmissionResponse)
	err := c.cc.Invoke(ctx, Query_GetTotalBlockEmission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEmission(ctx context.Context, in *QueryEmissionRequest, opts ...grpc.CallOption) (*QueryEmissionResponse, error) {
	out := new(QueryEmissionResponse)
	err := c.cc.Invoke(ctx, Query_GetEmission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDailyEmission(ctx context.Context, in *QueryDailyEmissionRequest, opts ...grpc.CallOption) (*QueryDailyEmissionResponse, error) {
	out := new(QueryDailyEmissionResponse)
	err := c.cc.Invoke(ctx, Query_GetDailyEmission_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLimit(ctx context.Context, in *QueryLimitRequest, opts ...grpc.CallOption) (*QueryLimitResponse, error) {
	out := new(QueryLimitResponse)
	err := c.cc.Invoke(ctx, Query_GetLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTributes(ctx context.Context, in *QueryTributesRequest, opts ...grpc.CallOption) (*QueryTributesResponse, error) {
	out := new(QueryTributesResponse)
	err := c.cc.Invoke(ctx, Query_GetTributes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	EmissionAll(context.Context, *QueryAllEmissionRequest) (*QueryAllEmissionResponse, error)
	GetEmissionEntity(context.Context, *QueryEmissionEntityRequest) (*QueryEmissionEntityResponse, error)
	GetTotalBlockEmission(context.Context, *QueryTotalBlockEmissionRequest) (*QueryTotalBlockEmissionResponse, error)
	GetEmission(context.Context, *QueryEmissionRequest) (*QueryEmissionResponse, error)
	GetDailyEmission(context.Context, *QueryDailyEmissionRequest) (*QueryDailyEmissionResponse, error)
	GetLimit(context.Context, *QueryLimitRequest) (*QueryLimitResponse, error)
	GetTributes(context.Context, *QueryTributesRequest) (*QueryTributesResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) EmissionAll(context.Context, *QueryAllEmissionRequest) (*QueryAllEmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmissionAll not implemented")
}
func (UnimplementedQueryServer) GetEmissionEntity(context.Context, *QueryEmissionEntityRequest) (*QueryEmissionEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmissionEntity not implemented")
}
func (UnimplementedQueryServer) GetTotalBlockEmission(context.Context, *QueryTotalBlockEmissionRequest) (*QueryTotalBlockEmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalBlockEmission not implemented")
}
func (UnimplementedQueryServer) GetEmission(context.Context, *QueryEmissionRequest) (*QueryEmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmission not implemented")
}
func (UnimplementedQueryServer) GetDailyEmission(context.Context, *QueryDailyEmissionRequest) (*QueryDailyEmissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyEmission not implemented")
}
func (UnimplementedQueryServer) GetLimit(context.Context, *QueryLimitRequest) (*QueryLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLimit not implemented")
}
func (UnimplementedQueryServer) GetTributes(context.Context, *QueryTributesRequest) (*QueryTributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTributes not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EmissionAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EmissionAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EmissionAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EmissionAll(ctx, req.(*QueryAllEmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEmissionEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEmissionEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEmissionEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetEmissionEntity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEmissionEntity(ctx, req.(*QueryEmissionEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTotalBlockEmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalBlockEmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTotalBlockEmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTotalBlockEmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTotalBlockEmission(ctx, req.(*QueryTotalBlockEmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetEmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEmission(ctx, req.(*QueryEmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDailyEmission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDailyEmissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDailyEmission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetDailyEmission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDailyEmission(ctx, req.(*QueryDailyEmissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLimit(ctx, req.(*QueryLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTributes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTributes(ctx, req.(*QueryTributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "outbe.allocationpool.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "EmissionAll",
			Handler:    _Query_EmissionAll_Handler,
		},
		{
			MethodName: "GetEmissionEntity",
			Handler:    _Query_GetEmissionEntity_Handler,
		},
		{
			MethodName: "GetTotalBlockEmission",
			Handler:    _Query_GetTotalBlockEmission_Handler,
		},
		{
			MethodName: "GetEmission",
			Handler:    _Query_GetEmission_Handler,
		},
		{
			MethodName: "GetDailyEmission",
			Handler:    _Query_GetDailyEmission_Handler,
		},
		{
			MethodName: "GetLimit",
			Handler:    _Query_GetLimit_Handler,
		},
		{
			MethodName: "GetTributes",
			Handler:    _Query_GetTributes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "outbe/allocationpool/query.proto",
}
