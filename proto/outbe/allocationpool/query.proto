syntax = "proto3";
package outbe.allocationpool;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "amino/amino.proto";

import "cosmos/base/query/v1beta1/pagination.proto";

import "outbe/allocationpool/emission.proto";
import "outbe/allocationpool/supply.proto";
import "outbe/allocationpool/tribute.proto";
import "outbe/allocationpool/params.proto";
import "outbe/allocationpool/cra.proto";

// this line is used by starport scaffolding # 1

option go_package = "github.com/outbe/outbe-node/x/allocationpool/types";

// Query defines the gRPC querier service.
service Query {

  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/outbe/allocationpool/params";
  }

  rpc EmissionAll(QueryAllEmissionRequest) returns (QueryAllEmissionResponse) {
    option (google.api.http).get = "/outbe/allocationpool/emissions";
  }

  rpc GetEmissionEntity(QueryEmissionEntityRequest) returns (QueryEmissionEntityResponse) {
    option (google.api.http).get               = "/outbe/allocationpool/block_emission/{block_number}";
  }

  rpc GetTotalBlockEmission(QueryTotalBlockEmissionRequest) returns (QueryTotalBlockEmissionResponse) {
    option (google.api.http).get               = "/outbe/allocationpool/emission/{block_number}";
  }

  rpc GetEmission(QueryEmissionRequest) returns (QueryEmissionResponse) {
    option (google.api.http).get               = "/outbe/allocationpool/emission";
  }

  rpc GetLimit(QueryLimitRequest) returns (QueryLimitResponse) {
    option (google.api.http).get               = "/outbe/allocationpool/limit";
  }

  rpc AllCRAs(QueryAllCRAsRequest) returns (QueryAllCRAsResponse) {
    option (google.api.http).get = "/outbe/allocationpool/cras";
  }

  rpc AllWallets(QueryAllWalletsRequest) returns (QueryAllWalletsResponse) {
    option (google.api.http).get = "/outbe/allocationpool/wallets";
  }

  rpc GetTributes(QueryTributesRequest) returns (QueryTributesResponse) {
    option (google.api.http).get               = "/outbe/allocationpool/tributes";
  }

}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params defines the parameters of the module.
  Params params = 1 [(gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryEmissionEntityRequest {
  int64 block_number = 1;
}

message QueryEmissionEntityResponse {
  Emission emission = 1;
}

message QueryAllEmissionRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllEmissionResponse {
	repeated Emission emissions = 1  [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryTotalBlockEmissionRequest {
  int64 block_number = 1;
}

message QueryTotalBlockEmissionResponse {
  string block_emission = 1;
}

message QueryEmissionRequest {
}

message QueryEmissionResponse {
  Emission emission = 1;
}

message QueryLimitRequest {
}

message QueryLimitResponse {
  string limit = 1;
}

message QueryAllCRAsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllCRAsResponse {
  repeated CRACU  cras = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryAllWalletsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllWalletsResponse {
  repeated Wallet  wallets = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryTributesRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryTributesResponse {
	repeated Tribute tributes = 1  [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}