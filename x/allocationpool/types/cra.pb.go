// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outbe/allocationpool/cra.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CRACU struct {
	Creator    string                      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CraAddress string                      `protobuf:"bytes,2,opt,name=cra_address,json=craAddress,proto3" json:"cra_address,omitempty"`
	Reward     cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=reward,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reward"`
}

func (m *CRACU) Reset()         { *m = CRACU{} }
func (m *CRACU) String() string { return proto.CompactTextString(m) }
func (*CRACU) ProtoMessage()    {}
func (*CRACU) Descriptor() ([]byte, []int) {
	return fileDescriptor_655c0c36c784f822, []int{0}
}
func (m *CRACU) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CRACU) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CRACU.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CRACU) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CRACU.Merge(m, src)
}
func (m *CRACU) XXX_Size() int {
	return m.Size()
}
func (m *CRACU) XXX_DiscardUnknown() {
	xxx_messageInfo_CRACU.DiscardUnknown(m)
}

var xxx_messageInfo_CRACU proto.InternalMessageInfo

func (m *CRACU) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CRACU) GetCraAddress() string {
	if m != nil {
		return m.CraAddress
	}
	return ""
}

type Wallet struct {
	Creator string                      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Address string                      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Reward  cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=reward,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reward"`
}

func (m *Wallet) Reset()         { *m = Wallet{} }
func (m *Wallet) String() string { return proto.CompactTextString(m) }
func (*Wallet) ProtoMessage()    {}
func (*Wallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_655c0c36c784f822, []int{1}
}
func (m *Wallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Wallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wallet.Merge(m, src)
}
func (m *Wallet) XXX_Size() int {
	return m.Size()
}
func (m *Wallet) XXX_DiscardUnknown() {
	xxx_messageInfo_Wallet.DiscardUnknown(m)
}

var xxx_messageInfo_Wallet proto.InternalMessageInfo

func (m *Wallet) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Wallet) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*CRACU)(nil), "outbe.allocationpool.CRACU")
	proto.RegisterType((*Wallet)(nil), "outbe.allocationpool.Wallet")
}

func init() { proto.RegisterFile("outbe/allocationpool/cra.proto", fileDescriptor_655c0c36c784f822) }

var fileDescriptor_655c0c36c784f822 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x63, 0x10, 0xad, 0x30, 0x13, 0x51, 0x87, 0x50, 0x24, 0x17, 0x75, 0x62, 0x69, 0xac,
	0xc2, 0x13, 0xf4, 0xcf, 0x82, 0xd4, 0xa9, 0x12, 0x42, 0x62, 0xa9, 0x2e, 0x8e, 0x95, 0x46, 0x24,
	0xb9, 0xca, 0x76, 0x81, 0x3e, 0x01, 0x13, 0x12, 0x0f, 0xc3, 0x43, 0x74, 0xac, 0x98, 0x10, 0x43,
	0x85, 0x9a, 0x17, 0x41, 0xb5, 0xd3, 0xa1, 0x0c, 0x4c, 0x2c, 0x27, 0x7f, 0xdf, 0xef, 0x7c, 0xfa,
	0xec, 0xa3, 0x0c, 0xe7, 0x26, 0x92, 0x1c, 0xb2, 0x0c, 0x05, 0x98, 0x14, 0x8b, 0x19, 0x62, 0xc6,
	0x85, 0x82, 0x70, 0xa6, 0xd0, 0xa0, 0xdf, 0xb0, 0x3c, 0xdc, 0xe7, 0xcd, 0x33, 0x81, 0x3a, 0x47,
	0x3d, 0xb1, 0x3d, 0xdc, 0x09, 0x77, 0xa1, 0x79, 0x0a, 0x79, 0x5a, 0x20, 0xb7, 0xb5, 0xb2, 0x98,
	0x6b, 0xe0, 0x11, 0x68, 0xc9, 0x1f, 0xbb, 0x91, 0x34, 0xd0, 0xe5, 0x02, 0xd3, 0xa2, 0xe2, 0x8d,
	0x04, 0x13, 0x74, 0xa3, 0xb6, 0x27, 0xe7, 0xb6, 0x5f, 0x09, 0x3d, 0x1a, 0x8c, 0x7b, 0x83, 0x5b,
	0x3f, 0xa0, 0x75, 0xa1, 0x24, 0x18, 0x54, 0x01, 0xb9, 0x20, 0x97, 0xc7, 0xe3, 0x9d, 0xf4, 0x5b,
	0xf4, 0x44, 0x28, 0x98, 0x40, 0x1c, 0x2b, 0xa9, 0x75, 0x70, 0x60, 0x29, 0x15, 0x0a, 0x7a, 0xce,
	0xf1, 0x6f, 0x68, 0x4d, 0xc9, 0x27, 0x50, 0x71, 0x70, 0xb8, 0x65, 0xfd, 0xee, 0x72, 0xdd, 0xf2,
	0xbe, 0xd6, 0xad, 0x73, 0x17, 0x49, 0xc7, 0x0f, 0x61, 0x8a, 0x3c, 0x07, 0x33, 0x0d, 0x47, 0x32,
	0x01, 0xb1, 0x18, 0x4a, 0xf1, 0xf1, 0xde, 0xa1, 0xd5, 0x93, 0x86, 0x52, 0x8c, 0xab, 0x01, 0xed,
	0x17, 0x42, 0x6b, 0x77, 0x90, 0x65, 0xd2, 0xfc, 0x11, 0x28, 0xa0, 0xf5, 0xfd, 0x30, 0x3b, 0xf9,
	0x8f, 0x49, 0xfa, 0xa3, 0xe5, 0x86, 0x91, 0xd5, 0x86, 0x91, 0xef, 0x0d, 0x23, 0x6f, 0x25, 0xf3,
	0x56, 0x25, 0xf3, 0x3e, 0x4b, 0xe6, 0xdd, 0x5f, 0x25, 0xa9, 0x99, 0xce, 0xa3, 0x50, 0x60, 0xce,
	0xdd, 0x62, 0x6d, 0xed, 0x14, 0x18, 0x4b, 0xfe, 0xfc, 0x7b, 0xcb, 0x66, 0x31, 0x93, 0x3a, 0xaa,
	0xd9, 0xef, 0xbe, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xe9, 0x00, 0xf6, 0x0a, 0x02, 0x00,
	0x00,
}

func (m *CRACU) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CRACU) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CRACU) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Reward.Size()
		i -= size
		if _, err := m.Reward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCra(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.CraAddress) > 0 {
		i -= len(m.CraAddress)
		copy(dAtA[i:], m.CraAddress)
		i = encodeVarintCra(dAtA, i, uint64(len(m.CraAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCra(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Wallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Wallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Reward.Size()
		i -= size
		if _, err := m.Reward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCra(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCra(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCra(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCra(dAtA []byte, offset int, v uint64) int {
	offset -= sovCra(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CRACU) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCra(uint64(l))
	}
	l = len(m.CraAddress)
	if l > 0 {
		n += 1 + l + sovCra(uint64(l))
	}
	l = m.Reward.Size()
	n += 1 + l + sovCra(uint64(l))
	return n
}

func (m *Wallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCra(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCra(uint64(l))
	}
	l = m.Reward.Size()
	n += 1 + l + sovCra(uint64(l))
	return n
}

func sovCra(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCra(x uint64) (n int) {
	return sovCra(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CRACU) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CRACU: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CRACU: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CraAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CraAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Wallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCra(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCra
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCra
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCra
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCra
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCra
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCra
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCra        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCra          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCra = fmt.Errorf("proto: unexpected end of group")
)
