// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outbe/cra/cra.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the module parameters.
type Params struct {
	ThetaCra         cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=theta_cra,json=thetaCra,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"theta_cra"`
	PerCraCap        cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=per_cra_cap,json=perCraCap,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"per_cra_cap"`
	EmaLambda        cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=ema_lambda,json=emaLambda,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"ema_lambda"`
	BetaMin          cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=beta_min,json=betaMin,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"beta_min"`
	BetaMax          cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=beta_max,json=betaMax,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"beta_max"`
	AnomalyThreshold cosmossdk_io_math.LegacyDec `protobuf:"bytes,6,opt,name=anomaly_threshold,json=anomalyThreshold,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"anomaly_threshold"`
	BBase            cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=b_base,json=bBase,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"b_base"`
	BScale           cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=b_scale,json=bScale,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"b_scale"`
	GracePeriodDays  uint64                      `protobuf:"varint,9,opt,name=grace_period_days,json=gracePeriodDays,proto3" json:"grace_period_days,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f034bee9c5286748, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetGracePeriodDays() uint64 {
	if m != nil {
		return m.GracePeriodDays
	}
	return 0
}

type CRA struct {
	Creator    string                      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CraAddress string                      `protobuf:"bytes,2,opt,name=cra_address,json=craAddress,proto3" json:"cra_address,omitempty"`
	Reward     cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=reward,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reward"`
}

func (m *CRA) Reset()         { *m = CRA{} }
func (m *CRA) String() string { return proto.CompactTextString(m) }
func (*CRA) ProtoMessage()    {}
func (*CRA) Descriptor() ([]byte, []int) {
	return fileDescriptor_f034bee9c5286748, []int{1}
}
func (m *CRA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CRA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CRA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CRA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CRA.Merge(m, src)
}
func (m *CRA) XXX_Size() int {
	return m.Size()
}
func (m *CRA) XXX_DiscardUnknown() {
	xxx_messageInfo_CRA.DiscardUnknown(m)
}

var xxx_messageInfo_CRA proto.InternalMessageInfo

func (m *CRA) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CRA) GetCraAddress() string {
	if m != nil {
		return m.CraAddress
	}
	return ""
}

type Wallet struct {
	Creator string                      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Address string                      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Reward  cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=reward,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"reward"`
}

func (m *Wallet) Reset()         { *m = Wallet{} }
func (m *Wallet) String() string { return proto.CompactTextString(m) }
func (*Wallet) ProtoMessage()    {}
func (*Wallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_f034bee9c5286748, []int{2}
}
func (m *Wallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Wallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wallet.Merge(m, src)
}
func (m *Wallet) XXX_Size() int {
	return m.Size()
}
func (m *Wallet) XXX_DiscardUnknown() {
	xxx_messageInfo_Wallet.DiscardUnknown(m)
}

var xxx_messageInfo_Wallet proto.InternalMessageInfo

func (m *Wallet) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Wallet) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "outbe.cra.Params")
	proto.RegisterType((*CRA)(nil), "outbe.cra.CRA")
	proto.RegisterType((*Wallet)(nil), "outbe.cra.Wallet")
}

func init() { proto.RegisterFile("outbe/cra/cra.proto", fileDescriptor_f034bee9c5286748) }

var fileDescriptor_f034bee9c5286748 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0xd4, 0xcf, 0x8a, 0x13, 0x4d,
	0x10, 0x00, 0xf0, 0xcc, 0xb7, 0x9b, 0x49, 0xd2, 0x7b, 0xf8, 0x4c, 0xeb, 0xa1, 0x5d, 0x61, 0xb2,
	0xe4, 0xe2, 0x22, 0x6c, 0x86, 0xe0, 0x13, 0xe4, 0xcf, 0x41, 0x25, 0x4a, 0x8c, 0x82, 0xe0, 0xc1,
	0xa1, 0xba, 0xa7, 0x48, 0x06, 0xa7, 0xa7, 0x87, 0xee, 0x5e, 0x4d, 0x9e, 0xc0, 0x83, 0x17, 0x1f,
	0xc6, 0x9b, 0x2f, 0xb0, 0xc7, 0xc5, 0x93, 0x78, 0x58, 0x24, 0x79, 0x11, 0x99, 0xee, 0x04, 0xf1,
	0xe2, 0x61, 0xf4, 0x30, 0xcd, 0x54, 0x55, 0xf3, 0xa3, 0x68, 0x8a, 0x22, 0xb7, 0xd5, 0xa5, 0xe5,
	0x18, 0x0b, 0x0d, 0xd5, 0x37, 0x28, 0xb5, 0xb2, 0x8a, 0x76, 0x5c, 0x72, 0x20, 0x34, 0x9c, 0xde,
	0x15, 0xca, 0x48, 0x65, 0x12, 0x57, 0x88, 0x7d, 0xe0, 0x6f, 0x9d, 0x76, 0x41, 0x66, 0x85, 0x8a,
	0xdd, 0xb9, 0x4f, 0x45, 0xfe, 0x42, 0xcc, 0xc1, 0x60, 0xfc, 0x6e, 0xc8, 0xd1, 0xc2, 0x30, 0x16,
	0x2a, 0x2b, 0xf6, 0xf5, 0x3b, 0x4b, 0xb5, 0x54, 0x9e, 0xaa, 0xfe, 0x7c, 0xb6, 0xff, 0xa5, 0x49,
	0xc2, 0x39, 0x68, 0x90, 0x86, 0x3e, 0x23, 0x1d, 0xbb, 0x42, 0x0b, 0x89, 0xd0, 0xc0, 0x82, 0xb3,
	0xe0, 0xbc, 0x33, 0x1e, 0x5e, 0xdd, 0xf4, 0x1a, 0xdf, 0x6f, 0x7a, 0xf7, 0xbc, 0x6d, 0xd2, 0xb7,
	0x83, 0x4c, 0xc5, 0x12, 0xec, 0x6a, 0x30, 0xc3, 0x25, 0x88, 0xcd, 0x14, 0xc5, 0xd7, 0xcf, 0x17,
	0x64, 0xdf, 0xdb, 0x14, 0xc5, 0xa2, 0xed, 0x8c, 0x89, 0x06, 0xfa, 0x9c, 0x9c, 0x94, 0xa8, 0x2b,
	0x2d, 0x11, 0x50, 0xb2, 0xff, 0xea, 0x8a, 0x9d, 0x12, 0xf5, 0x44, 0xc3, 0x04, 0x4a, 0x3a, 0x27,
	0x04, 0x25, 0x24, 0x39, 0x48, 0x9e, 0x02, 0x3b, 0xaa, 0x2d, 0xa2, 0x84, 0x99, 0x33, 0xe8, 0x8c,
	0xb4, 0xab, 0x97, 0x4a, 0x64, 0x56, 0xb0, 0xe3, 0xba, 0x5e, 0xab, 0x22, 0x9e, 0x66, 0xc5, 0x2f,
	0x0d, 0xd6, 0xac, 0xf9, 0x77, 0x1a, 0xac, 0xe9, 0x1b, 0xd2, 0x85, 0x42, 0x49, 0xc8, 0x37, 0x89,
	0x5d, 0x69, 0x34, 0x2b, 0x95, 0xa7, 0x2c, 0xac, 0xcb, 0xde, 0xda, 0x5b, 0x2f, 0x0f, 0x14, 0x7d,
	0x44, 0x42, 0x9e, 0x54, 0xe3, 0xc2, 0x5a, 0x75, 0xd1, 0x26, 0x1f, 0x83, 0x41, 0xfa, 0x84, 0xb4,
	0x78, 0x62, 0x04, 0xe4, 0xc8, 0xda, 0x75, 0xa9, 0x90, 0xbf, 0xa8, 0x00, 0xfa, 0x80, 0x74, 0x97,
	0x1a, 0x04, 0x26, 0x25, 0xea, 0x4c, 0xa5, 0x49, 0x0a, 0x1b, 0xc3, 0x3a, 0x67, 0xc1, 0xf9, 0xf1,
	0xe2, 0x7f, 0x57, 0x98, 0xbb, 0xfc, 0x14, 0x36, 0xa6, 0xff, 0x31, 0x20, 0x47, 0x93, 0xc5, 0x88,
	0x32, 0xd2, 0x12, 0x1a, 0xc1, 0x2a, 0xed, 0x07, 0x77, 0x71, 0x08, 0x69, 0x8f, 0x9c, 0x54, 0x03,
	0x08, 0x69, 0xaa, 0xd1, 0x18, 0x3f, 0x84, 0x0b, 0x22, 0x34, 0x8c, 0x7c, 0x86, 0x3e, 0x26, 0xa1,
	0xc6, 0xf7, 0xa0, 0xd3, 0xfa, 0xe3, 0xb4, 0x07, 0xfa, 0x1f, 0x02, 0x12, 0xbe, 0x82, 0x3c, 0x47,
	0xfb, 0x87, 0x86, 0x18, 0x69, 0xfd, 0xde, 0xcc, 0x21, 0xfc, 0x87, 0x9d, 0x8c, 0x47, 0x57, 0xdb,
	0x28, 0xb8, 0xde, 0x46, 0xc1, 0x8f, 0x6d, 0x14, 0x7c, 0xda, 0x45, 0x8d, 0xeb, 0x5d, 0xd4, 0xf8,
	0xb6, 0x8b, 0x1a, 0xaf, 0xef, 0x2f, 0x33, 0xbb, 0xba, 0xe4, 0x03, 0xa1, 0x64, 0xec, 0xd7, 0x8f,
	0x3b, 0x2f, 0x0a, 0x95, 0x62, 0xbc, 0x76, 0xbb, 0xc8, 0x6e, 0x4a, 0x34, 0x3c, 0x74, 0xfb, 0xe1,
	0xe1, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x14, 0xe5, 0xe9, 0xd6, 0xa5, 0x04, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GracePeriodDays != 0 {
		i = encodeVarintCra(dAtA, i, uint64(m.GracePeriodDays))
		i--
		dAtA[i] = 0x48
	}
	{
		size := m.BScale.Size()
		i -= size
		if _, err := m.BScale.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCra(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.BBase.Size()
		i -= size
		if _, err := m.BBase.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCra(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.AnomalyThreshold.Size()
		i -= size
		if _, err := m.AnomalyThreshold.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCra(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.BetaMax.Size()
		i -= size
		if _, err := m.BetaMax.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCra(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.BetaMin.Size()
		i -= size
		if _, err := m.BetaMin.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCra(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.EmaLambda.Size()
		i -= size
		if _, err := m.EmaLambda.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCra(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.PerCraCap.Size()
		i -= size
		if _, err := m.PerCraCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCra(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ThetaCra.Size()
		i -= size
		if _, err := m.ThetaCra.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCra(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CRA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CRA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CRA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Reward.Size()
		i -= size
		if _, err := m.Reward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCra(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.CraAddress) > 0 {
		i -= len(m.CraAddress)
		copy(dAtA[i:], m.CraAddress)
		i = encodeVarintCra(dAtA, i, uint64(len(m.CraAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCra(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Wallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Wallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Reward.Size()
		i -= size
		if _, err := m.Reward.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCra(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCra(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCra(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCra(dAtA []byte, offset int, v uint64) int {
	offset -= sovCra(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ThetaCra.Size()
	n += 1 + l + sovCra(uint64(l))
	l = m.PerCraCap.Size()
	n += 1 + l + sovCra(uint64(l))
	l = m.EmaLambda.Size()
	n += 1 + l + sovCra(uint64(l))
	l = m.BetaMin.Size()
	n += 1 + l + sovCra(uint64(l))
	l = m.BetaMax.Size()
	n += 1 + l + sovCra(uint64(l))
	l = m.AnomalyThreshold.Size()
	n += 1 + l + sovCra(uint64(l))
	l = m.BBase.Size()
	n += 1 + l + sovCra(uint64(l))
	l = m.BScale.Size()
	n += 1 + l + sovCra(uint64(l))
	if m.GracePeriodDays != 0 {
		n += 1 + sovCra(uint64(m.GracePeriodDays))
	}
	return n
}

func (m *CRA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCra(uint64(l))
	}
	l = len(m.CraAddress)
	if l > 0 {
		n += 1 + l + sovCra(uint64(l))
	}
	l = m.Reward.Size()
	n += 1 + l + sovCra(uint64(l))
	return n
}

func (m *Wallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCra(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCra(uint64(l))
	}
	l = m.Reward.Size()
	n += 1 + l + sovCra(uint64(l))
	return n
}

func sovCra(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCra(x uint64) (n int) {
	return sovCra(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThetaCra", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ThetaCra.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PerCraCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PerCraCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmaLambda", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EmaLambda.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetaMin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetaMin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BetaMax", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BetaMax.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnomalyThreshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AnomalyThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BBase", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BScale", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BScale.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GracePeriodDays", wireType)
			}
			m.GracePeriodDays = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GracePeriodDays |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CRA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CRA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CRA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CraAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CraAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Wallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCra
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCra
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCra
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCra
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCra(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCra
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCra(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCra
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCra
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCra
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCra
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCra
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCra
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCra        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCra          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCra = fmt.Errorf("proto: unexpected end of group")
)
