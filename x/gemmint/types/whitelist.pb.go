// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outbe/gemmint/whitelist.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Message to maintain the eligible contracts to mint native token
type Whitelist struct {
	Creator         string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ContractAddress string `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	Created         string `protobuf:"bytes,3,opt,name=created,proto3" json:"created,omitempty"`
	Enabled         bool   `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (m *Whitelist) Reset()         { *m = Whitelist{} }
func (m *Whitelist) String() string { return proto.CompactTextString(m) }
func (*Whitelist) ProtoMessage()    {}
func (*Whitelist) Descriptor() ([]byte, []int) {
	return fileDescriptor_cc6dfd3c99d18a2c, []int{0}
}
func (m *Whitelist) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Whitelist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Whitelist.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Whitelist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Whitelist.Merge(m, src)
}
func (m *Whitelist) XXX_Size() int {
	return m.Size()
}
func (m *Whitelist) XXX_DiscardUnknown() {
	xxx_messageInfo_Whitelist.DiscardUnknown(m)
}

var xxx_messageInfo_Whitelist proto.InternalMessageInfo

func (m *Whitelist) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Whitelist) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *Whitelist) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Whitelist) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func init() {
	proto.RegisterType((*Whitelist)(nil), "outbe.gemmint.Whitelist")
}

func init() { proto.RegisterFile("outbe/gemmint/whitelist.proto", fileDescriptor_cc6dfd3c99d18a2c) }

var fileDescriptor_cc6dfd3c99d18a2c = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcb, 0x4a, 0x03, 0x31,
	0x14, 0x86, 0x27, 0x2a, 0x6a, 0x07, 0x44, 0x99, 0x55, 0x10, 0x0c, 0xc5, 0x55, 0x45, 0x9c, 0x50,
	0x7c, 0x02, 0x05, 0x5f, 0xa0, 0x1b, 0xc1, 0x8d, 0xe4, 0x72, 0x68, 0x03, 0x4d, 0x4e, 0x49, 0x4e,
	0xbd, 0xec, 0x7d, 0x00, 0x1f, 0xcb, 0x65, 0x97, 0x2e, 0x65, 0xe6, 0x45, 0xc4, 0x8c, 0x29, 0xdd,
	0x1c, 0xf8, 0x2f, 0x7c, 0xf0, 0x9f, 0xfa, 0x02, 0xd7, 0xa4, 0x41, 0xce, 0xc1, 0x7b, 0x17, 0x48,
	0xbe, 0x2e, 0x1c, 0xc1, 0xd2, 0x25, 0x6a, 0x57, 0x11, 0x09, 0x9b, 0x93, 0x1c, 0xb7, 0xff, 0xf1,
	0xb9, 0x30, 0x98, 0x3c, 0x26, 0xa9, 0x55, 0x02, 0xf9, 0x32, 0xd5, 0x40, 0x6a, 0x2a, 0x0d, 0xba,
	0x30, 0xd4, 0x2f, 0x3f, 0x58, 0x3d, 0x7a, 0x2c, 0x88, 0x86, 0xd7, 0x47, 0x26, 0x82, 0x22, 0x8c,
	0x9c, 0x8d, 0xd9, 0x64, 0x34, 0x2b, 0xb2, 0xb9, 0xaa, 0xcf, 0x0c, 0x06, 0x8a, 0xca, 0xd0, 0xb3,
	0xb2, 0x36, 0x42, 0x4a, 0x7c, 0x2f, 0x57, 0x4e, 0x8b, 0x7f, 0x37, 0xd8, 0x5b, 0x08, 0x58, 0xbe,
	0xbf, 0x03, 0x01, 0xfb, 0x97, 0x40, 0x50, 0x7a, 0x09, 0x96, 0x1f, 0x8c, 0xd9, 0xe4, 0x78, 0x56,
	0xe4, 0xfd, 0xc3, 0x57, 0x27, 0xd8, 0xa6, 0x13, 0xec, 0xa7, 0x13, 0xec, 0xb3, 0x17, 0xd5, 0xa6,
	0x17, 0xd5, 0x77, 0x2f, 0xaa, 0xa7, 0xeb, 0xb9, 0xa3, 0xc5, 0x5a, 0xb7, 0x06, 0xbd, 0x1c, 0x96,
	0xe7, 0x7b, 0x13, 0xd0, 0x82, 0x7c, 0xdb, 0xbe, 0x81, 0xde, 0x57, 0x90, 0xf4, 0x61, 0x1e, 0x75,
	0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x34, 0x7f, 0x60, 0x7c, 0x24, 0x01, 0x00, 0x00,
}

func (m *Whitelist) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Whitelist) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Whitelist) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Created) > 0 {
		i -= len(m.Created)
		copy(dAtA[i:], m.Created)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.Created)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ContractAddress) > 0 {
		i -= len(m.ContractAddress)
		copy(dAtA[i:], m.ContractAddress)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintWhitelist(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintWhitelist(dAtA []byte, offset int, v uint64) int {
	offset -= sovWhitelist(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Whitelist) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.ContractAddress)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	l = len(m.Created)
	if l > 0 {
		n += 1 + l + sovWhitelist(uint64(l))
	}
	if m.Enabled {
		n += 2
	}
	return n
}

func sovWhitelist(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWhitelist(x uint64) (n int) {
	return sovWhitelist(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Whitelist) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhitelist
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Whitelist: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Whitelist: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWhitelist
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWhitelist
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Created = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWhitelist(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhitelist
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWhitelist(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWhitelist
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhitelist
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWhitelist
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWhitelist
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWhitelist
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWhitelist        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWhitelist          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWhitelist = fmt.Errorf("proto: unexpected end of group")
)
