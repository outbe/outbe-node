// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: qcore/pool/minter.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Minter struct {
	Provisions                           string `protobuf:"bytes,1,opt,name=provisions,proto3" json:"provisions,omitempty"`
	ReductionPeriodInEpochs              uint64 `protobuf:"varint,2,opt,name=reduction_period_in_epochs,json=reductionPeriodInEpochs,proto3" json:"reduction_period_in_epochs,omitempty"`
	MinterType                           string `protobuf:"bytes,3,opt,name=minter_type,json=minterType,proto3" json:"minter_type,omitempty"`
	TotalMinted                          string `protobuf:"bytes,4,opt,name=total_minted,json=totalMinted,proto3" json:"total_minted,omitempty"`
	MintingRewardsDistributionStartEpoch uint64 `protobuf:"varint,5,opt,name=minting_rewards_distribution_start_epoch,json=mintingRewardsDistributionStartEpoch,proto3" json:"minting_rewards_distribution_start_epoch,omitempty"`
	MintingInterval                      string `protobuf:"bytes,6,opt,name=minting_interval,json=mintingInterval,proto3" json:"minting_interval,omitempty"`
	ModuleAccount                        string `protobuf:"bytes,7,opt,name=module_account,json=moduleAccount,proto3" json:"module_account,omitempty"`
	MinterCap                            string `protobuf:"bytes,8,opt,name=minter_cap,json=minterCap,proto3" json:"minter_cap,omitempty"`
	EpochIdentifier                      string `protobuf:"bytes,9,opt,name=epoch_identifier,json=epochIdentifier,proto3" json:"epoch_identifier,omitempty"`
}

func (m *Minter) Reset()         { *m = Minter{} }
func (m *Minter) String() string { return proto.CompactTextString(m) }
func (*Minter) ProtoMessage()    {}
func (*Minter) Descriptor() ([]byte, []int) {
	return fileDescriptor_8728d2970c14c1eb, []int{0}
}
func (m *Minter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Minter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Minter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Minter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Minter.Merge(m, src)
}
func (m *Minter) XXX_Size() int {
	return m.Size()
}
func (m *Minter) XXX_DiscardUnknown() {
	xxx_messageInfo_Minter.DiscardUnknown(m)
}

var xxx_messageInfo_Minter proto.InternalMessageInfo

func (m *Minter) GetProvisions() string {
	if m != nil {
		return m.Provisions
	}
	return ""
}

func (m *Minter) GetReductionPeriodInEpochs() uint64 {
	if m != nil {
		return m.ReductionPeriodInEpochs
	}
	return 0
}

func (m *Minter) GetMinterType() string {
	if m != nil {
		return m.MinterType
	}
	return ""
}

func (m *Minter) GetTotalMinted() string {
	if m != nil {
		return m.TotalMinted
	}
	return ""
}

func (m *Minter) GetMintingRewardsDistributionStartEpoch() uint64 {
	if m != nil {
		return m.MintingRewardsDistributionStartEpoch
	}
	return 0
}

func (m *Minter) GetMintingInterval() string {
	if m != nil {
		return m.MintingInterval
	}
	return ""
}

func (m *Minter) GetModuleAccount() string {
	if m != nil {
		return m.ModuleAccount
	}
	return ""
}

func (m *Minter) GetMinterCap() string {
	if m != nil {
		return m.MinterCap
	}
	return ""
}

func (m *Minter) GetEpochIdentifier() string {
	if m != nil {
		return m.EpochIdentifier
	}
	return ""
}

func init() {
	proto.RegisterType((*Minter)(nil), "qcore.pool.Minter")
}

func init() { proto.RegisterFile("qcore/pool/minter.proto", fileDescriptor_8728d2970c14c1eb) }

var fileDescriptor_8728d2970c14c1eb = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0xbd, 0xce, 0xd3, 0x30,
	0x14, 0x86, 0x1b, 0x5a, 0x0a, 0x75, 0xf9, 0x93, 0x85, 0x54, 0xab, 0x12, 0xa1, 0x20, 0x10, 0x65,
	0xa0, 0x19, 0x18, 0x99, 0xca, 0xcf, 0xd0, 0x01, 0x09, 0x15, 0xc4, 0xc0, 0x62, 0x39, 0xb1, 0x49,
	0x2d, 0xa5, 0x3e, 0xae, 0xed, 0x94, 0x96, 0xab, 0xe0, 0x06, 0xb8, 0x1f, 0xc6, 0x8e, 0x8c, 0x9f,
	0xda, 0x1b, 0xf9, 0x94, 0xe3, 0x7c, 0x55, 0xb7, 0xe8, 0x79, 0x9f, 0xf8, 0xbc, 0x89, 0x0f, 0x19,
	0x6d, 0x0a, 0x70, 0x2a, 0xb3, 0x00, 0x55, 0xb6, 0xd6, 0x26, 0x28, 0x37, 0xb3, 0x0e, 0x02, 0x50,
	0x82, 0xc1, 0xac, 0x09, 0xc6, 0x8f, 0x4b, 0x28, 0x01, 0x71, 0xd6, 0x3c, 0x45, 0xe3, 0xf9, 0xdf,
	0x2e, 0xe9, 0x7f, 0xc6, 0x57, 0x68, 0x4a, 0x88, 0x75, 0xb0, 0xd5, 0x5e, 0x83, 0xf1, 0x2c, 0x99,
	0x24, 0xd3, 0xc1, 0xf2, 0x82, 0xd0, 0x77, 0x64, 0xec, 0x94, 0xac, 0x8b, 0xa0, 0xc1, 0x70, 0xab,
	0x9c, 0x06, 0xc9, 0xb5, 0xe1, 0xca, 0x42, 0xb1, 0xf2, 0xec, 0xd6, 0x24, 0x99, 0xf6, 0x96, 0xa3,
	0xb3, 0xf1, 0x05, 0x85, 0x85, 0xf9, 0x84, 0x31, 0x7d, 0x4a, 0x86, 0xb1, 0x19, 0x0f, 0x7b, 0xab,
	0x58, 0x37, 0x9e, 0x1e, 0xd1, 0xb7, 0xbd, 0x55, 0xf4, 0x19, 0xb9, 0x17, 0x20, 0x88, 0x8a, 0x23,
	0x93, 0xac, 0x87, 0xc6, 0x10, 0x19, 0x16, 0x94, 0xf4, 0x3b, 0x99, 0x36, 0xa1, 0x36, 0x25, 0x77,
	0xea, 0x97, 0x70, 0xd2, 0x73, 0xa9, 0x7d, 0x70, 0x3a, 0xaf, 0xb1, 0x93, 0x0f, 0xc2, 0x85, 0xd8,
	0x87, 0xdd, 0xc6, 0x3a, 0x2f, 0x5a, 0x7f, 0x19, 0xf5, 0x8f, 0x17, 0xf6, 0xd7, 0x46, 0xc6, 0x72,
	0xf4, 0x35, 0x79, 0x74, 0x73, 0x2e, 0xf6, 0xd9, 0x8a, 0x8a, 0xf5, 0x71, 0xfc, 0xc3, 0x96, 0x2f,
	0x5a, 0x4c, 0x5f, 0x92, 0x07, 0x6b, 0x90, 0x75, 0xa5, 0xb8, 0x28, 0x0a, 0xa8, 0x4d, 0x60, 0x77,
	0x50, 0xbc, 0x1f, 0xe9, 0x3c, 0x42, 0xfa, 0x84, 0xb4, 0x9f, 0xc6, 0x0b, 0x61, 0xd9, 0x5d, 0x54,
	0x06, 0x91, 0x7c, 0x10, 0xb6, 0x19, 0x88, 0x2d, 0xb9, 0x96, 0xca, 0x04, 0xfd, 0x53, 0x2b, 0xc7,
	0x06, 0x71, 0x20, 0xf2, 0xc5, 0x19, 0xbf, 0x9f, 0xff, 0x3b, 0xa6, 0xc9, 0xe1, 0x98, 0x26, 0x57,
	0xc7, 0x34, 0xf9, 0x73, 0x4a, 0x3b, 0x87, 0x53, 0xda, 0xf9, 0x7f, 0x4a, 0x3b, 0x3f, 0x5e, 0x95,
	0x3a, 0xac, 0xea, 0x7c, 0x56, 0xc0, 0x3a, 0xdb, 0x54, 0x22, 0xf7, 0x6f, 0x76, 0xfb, 0xdf, 0x59,
	0xdc, 0x84, 0x5d, 0xdc, 0x85, 0xe6, 0x57, 0xfb, 0xbc, 0x8f, 0x37, 0xfd, 0xf6, 0x3a, 0x00, 0x00,
	0xff, 0xff, 0xac, 0xff, 0xa7, 0x82, 0x26, 0x02, 0x00, 0x00,
}

func (m *Minter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Minter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Minter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochIdentifier) > 0 {
		i -= len(m.EpochIdentifier)
		copy(dAtA[i:], m.EpochIdentifier)
		i = encodeVarintMinter(dAtA, i, uint64(len(m.EpochIdentifier)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MinterCap) > 0 {
		i -= len(m.MinterCap)
		copy(dAtA[i:], m.MinterCap)
		i = encodeVarintMinter(dAtA, i, uint64(len(m.MinterCap)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ModuleAccount) > 0 {
		i -= len(m.ModuleAccount)
		copy(dAtA[i:], m.ModuleAccount)
		i = encodeVarintMinter(dAtA, i, uint64(len(m.ModuleAccount)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MintingInterval) > 0 {
		i -= len(m.MintingInterval)
		copy(dAtA[i:], m.MintingInterval)
		i = encodeVarintMinter(dAtA, i, uint64(len(m.MintingInterval)))
		i--
		dAtA[i] = 0x32
	}
	if m.MintingRewardsDistributionStartEpoch != 0 {
		i = encodeVarintMinter(dAtA, i, uint64(m.MintingRewardsDistributionStartEpoch))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TotalMinted) > 0 {
		i -= len(m.TotalMinted)
		copy(dAtA[i:], m.TotalMinted)
		i = encodeVarintMinter(dAtA, i, uint64(len(m.TotalMinted)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MinterType) > 0 {
		i -= len(m.MinterType)
		copy(dAtA[i:], m.MinterType)
		i = encodeVarintMinter(dAtA, i, uint64(len(m.MinterType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReductionPeriodInEpochs != 0 {
		i = encodeVarintMinter(dAtA, i, uint64(m.ReductionPeriodInEpochs))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Provisions) > 0 {
		i -= len(m.Provisions)
		copy(dAtA[i:], m.Provisions)
		i = encodeVarintMinter(dAtA, i, uint64(len(m.Provisions)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMinter(dAtA []byte, offset int, v uint64) int {
	offset -= sovMinter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Minter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Provisions)
	if l > 0 {
		n += 1 + l + sovMinter(uint64(l))
	}
	if m.ReductionPeriodInEpochs != 0 {
		n += 1 + sovMinter(uint64(m.ReductionPeriodInEpochs))
	}
	l = len(m.MinterType)
	if l > 0 {
		n += 1 + l + sovMinter(uint64(l))
	}
	l = len(m.TotalMinted)
	if l > 0 {
		n += 1 + l + sovMinter(uint64(l))
	}
	if m.MintingRewardsDistributionStartEpoch != 0 {
		n += 1 + sovMinter(uint64(m.MintingRewardsDistributionStartEpoch))
	}
	l = len(m.MintingInterval)
	if l > 0 {
		n += 1 + l + sovMinter(uint64(l))
	}
	l = len(m.ModuleAccount)
	if l > 0 {
		n += 1 + l + sovMinter(uint64(l))
	}
	l = len(m.MinterCap)
	if l > 0 {
		n += 1 + l + sovMinter(uint64(l))
	}
	l = len(m.EpochIdentifier)
	if l > 0 {
		n += 1 + l + sovMinter(uint64(l))
	}
	return n
}

func sovMinter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMinter(x uint64) (n int) {
	return sovMinter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Minter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMinter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Minter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Minter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Provisions", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Provisions = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReductionPeriodInEpochs", wireType)
			}
			m.ReductionPeriodInEpochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReductionPeriodInEpochs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinterType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinterType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalMinted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalMinted = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintingRewardsDistributionStartEpoch", wireType)
			}
			m.MintingRewardsDistributionStartEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MintingRewardsDistributionStartEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintingInterval", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintingInterval = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinterCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinterCap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMinter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMinter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMinter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMinter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMinter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMinter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMinter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMinter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMinter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMinter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMinter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMinter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMinter = fmt.Errorf("proto: unexpected end of group")
)
