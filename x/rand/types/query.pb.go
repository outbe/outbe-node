// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outbe/rand/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1022d5271aec4962, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1022d5271aec4962, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryPeriodRequest struct {
}

func (m *QueryPeriodRequest) Reset()         { *m = QueryPeriodRequest{} }
func (m *QueryPeriodRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPeriodRequest) ProtoMessage()    {}
func (*QueryPeriodRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1022d5271aec4962, []int{2}
}
func (m *QueryPeriodRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPeriodRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPeriodRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPeriodRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPeriodRequest.Merge(m, src)
}
func (m *QueryPeriodRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPeriodRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPeriodRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPeriodRequest proto.InternalMessageInfo

type QueryPeriodResponse struct {
	Period *Period `protobuf:"bytes,1,opt,name=period,proto3" json:"period,omitempty"`
}

func (m *QueryPeriodResponse) Reset()         { *m = QueryPeriodResponse{} }
func (m *QueryPeriodResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPeriodResponse) ProtoMessage()    {}
func (*QueryPeriodResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1022d5271aec4962, []int{3}
}
func (m *QueryPeriodResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPeriodResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPeriodResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPeriodResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPeriodResponse.Merge(m, src)
}
func (m *QueryPeriodResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPeriodResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPeriodResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPeriodResponse proto.InternalMessageInfo

func (m *QueryPeriodResponse) GetPeriod() *Period {
	if m != nil {
		return m.Period
	}
	return nil
}

type QueryCommitmentRequest struct {
	Period    string `protobuf:"bytes,1,opt,name=period,proto3" json:"period,omitempty"`
	Validator string `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *QueryCommitmentRequest) Reset()         { *m = QueryCommitmentRequest{} }
func (m *QueryCommitmentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCommitmentRequest) ProtoMessage()    {}
func (*QueryCommitmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1022d5271aec4962, []int{4}
}
func (m *QueryCommitmentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommitmentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommitmentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommitmentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommitmentRequest.Merge(m, src)
}
func (m *QueryCommitmentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommitmentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommitmentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommitmentRequest proto.InternalMessageInfo

func (m *QueryCommitmentRequest) GetPeriod() string {
	if m != nil {
		return m.Period
	}
	return ""
}

func (m *QueryCommitmentRequest) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

type QueryCommitmentResponse struct {
	Commitment *Commitment `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (m *QueryCommitmentResponse) Reset()         { *m = QueryCommitmentResponse{} }
func (m *QueryCommitmentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCommitmentResponse) ProtoMessage()    {}
func (*QueryCommitmentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1022d5271aec4962, []int{5}
}
func (m *QueryCommitmentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommitmentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommitmentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommitmentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommitmentResponse.Merge(m, src)
}
func (m *QueryCommitmentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommitmentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommitmentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommitmentResponse proto.InternalMessageInfo

func (m *QueryCommitmentResponse) GetCommitment() *Commitment {
	if m != nil {
		return m.Commitment
	}
	return nil
}

type QueryCommitmentsRequest struct {
}

func (m *QueryCommitmentsRequest) Reset()         { *m = QueryCommitmentsRequest{} }
func (m *QueryCommitmentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCommitmentsRequest) ProtoMessage()    {}
func (*QueryCommitmentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1022d5271aec4962, []int{6}
}
func (m *QueryCommitmentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommitmentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommitmentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommitmentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommitmentsRequest.Merge(m, src)
}
func (m *QueryCommitmentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommitmentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommitmentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommitmentsRequest proto.InternalMessageInfo

type QueryCommitmentsResponse struct {
	Commitments []*Commitment `protobuf:"bytes,1,rep,name=commitments,proto3" json:"commitments,omitempty"`
}

func (m *QueryCommitmentsResponse) Reset()         { *m = QueryCommitmentsResponse{} }
func (m *QueryCommitmentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCommitmentsResponse) ProtoMessage()    {}
func (*QueryCommitmentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1022d5271aec4962, []int{7}
}
func (m *QueryCommitmentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCommitmentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCommitmentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCommitmentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCommitmentsResponse.Merge(m, src)
}
func (m *QueryCommitmentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCommitmentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCommitmentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCommitmentsResponse proto.InternalMessageInfo

func (m *QueryCommitmentsResponse) GetCommitments() []*Commitment {
	if m != nil {
		return m.Commitments
	}
	return nil
}

type QueryRevealsRequest struct {
}

func (m *QueryRevealsRequest) Reset()         { *m = QueryRevealsRequest{} }
func (m *QueryRevealsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRevealsRequest) ProtoMessage()    {}
func (*QueryRevealsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1022d5271aec4962, []int{8}
}
func (m *QueryRevealsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRevealsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRevealsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRevealsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRevealsRequest.Merge(m, src)
}
func (m *QueryRevealsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRevealsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRevealsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRevealsRequest proto.InternalMessageInfo

type QueryRevealsResponse struct {
	Reveals []*Reveal `protobuf:"bytes,1,rep,name=reveals,proto3" json:"reveals,omitempty"`
}

func (m *QueryRevealsResponse) Reset()         { *m = QueryRevealsResponse{} }
func (m *QueryRevealsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRevealsResponse) ProtoMessage()    {}
func (*QueryRevealsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1022d5271aec4962, []int{9}
}
func (m *QueryRevealsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRevealsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRevealsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRevealsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRevealsResponse.Merge(m, src)
}
func (m *QueryRevealsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRevealsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRevealsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRevealsResponse proto.InternalMessageInfo

func (m *QueryRevealsResponse) GetReveals() []*Reveal {
	if m != nil {
		return m.Reveals
	}
	return nil
}

type QueryPenaltiesRequest struct {
}

func (m *QueryPenaltiesRequest) Reset()         { *m = QueryPenaltiesRequest{} }
func (m *QueryPenaltiesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPenaltiesRequest) ProtoMessage()    {}
func (*QueryPenaltiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1022d5271aec4962, []int{10}
}
func (m *QueryPenaltiesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPenaltiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPenaltiesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPenaltiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPenaltiesRequest.Merge(m, src)
}
func (m *QueryPenaltiesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPenaltiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPenaltiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPenaltiesRequest proto.InternalMessageInfo

type QueryPenaltiesResponse struct {
	Penalties []*Penalty `protobuf:"bytes,1,rep,name=penalties,proto3" json:"penalties,omitempty"`
}

func (m *QueryPenaltiesResponse) Reset()         { *m = QueryPenaltiesResponse{} }
func (m *QueryPenaltiesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPenaltiesResponse) ProtoMessage()    {}
func (*QueryPenaltiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1022d5271aec4962, []int{11}
}
func (m *QueryPenaltiesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPenaltiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPenaltiesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPenaltiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPenaltiesResponse.Merge(m, src)
}
func (m *QueryPenaltiesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPenaltiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPenaltiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPenaltiesResponse proto.InternalMessageInfo

func (m *QueryPenaltiesResponse) GetPenalties() []*Penalty {
	if m != nil {
		return m.Penalties
	}
	return nil
}

type QueryCurrentRandomnessRequest struct {
}

func (m *QueryCurrentRandomnessRequest) Reset()         { *m = QueryCurrentRandomnessRequest{} }
func (m *QueryCurrentRandomnessRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentRandomnessRequest) ProtoMessage()    {}
func (*QueryCurrentRandomnessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1022d5271aec4962, []int{12}
}
func (m *QueryCurrentRandomnessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentRandomnessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentRandomnessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentRandomnessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentRandomnessRequest.Merge(m, src)
}
func (m *QueryCurrentRandomnessRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentRandomnessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentRandomnessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentRandomnessRequest proto.InternalMessageInfo

type QueryCurrentRandomnessResponse struct {
	Period     uint64 `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
	Randomness []byte `protobuf:"bytes,2,opt,name=randomness,proto3" json:"randomness,omitempty"`
}

func (m *QueryCurrentRandomnessResponse) Reset()         { *m = QueryCurrentRandomnessResponse{} }
func (m *QueryCurrentRandomnessResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentRandomnessResponse) ProtoMessage()    {}
func (*QueryCurrentRandomnessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1022d5271aec4962, []int{13}
}
func (m *QueryCurrentRandomnessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentRandomnessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentRandomnessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentRandomnessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentRandomnessResponse.Merge(m, src)
}
func (m *QueryCurrentRandomnessResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentRandomnessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentRandomnessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentRandomnessResponse proto.InternalMessageInfo

func (m *QueryCurrentRandomnessResponse) GetPeriod() uint64 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *QueryCurrentRandomnessResponse) GetRandomness() []byte {
	if m != nil {
		return m.Randomness
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "outbe.rand.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "outbe.rand.QueryParamsResponse")
	proto.RegisterType((*QueryPeriodRequest)(nil), "outbe.rand.QueryPeriodRequest")
	proto.RegisterType((*QueryPeriodResponse)(nil), "outbe.rand.QueryPeriodResponse")
	proto.RegisterType((*QueryCommitmentRequest)(nil), "outbe.rand.QueryCommitmentRequest")
	proto.RegisterType((*QueryCommitmentResponse)(nil), "outbe.rand.QueryCommitmentResponse")
	proto.RegisterType((*QueryCommitmentsRequest)(nil), "outbe.rand.QueryCommitmentsRequest")
	proto.RegisterType((*QueryCommitmentsResponse)(nil), "outbe.rand.QueryCommitmentsResponse")
	proto.RegisterType((*QueryRevealsRequest)(nil), "outbe.rand.QueryRevealsRequest")
	proto.RegisterType((*QueryRevealsResponse)(nil), "outbe.rand.QueryRevealsResponse")
	proto.RegisterType((*QueryPenaltiesRequest)(nil), "outbe.rand.QueryPenaltiesRequest")
	proto.RegisterType((*QueryPenaltiesResponse)(nil), "outbe.rand.QueryPenaltiesResponse")
	proto.RegisterType((*QueryCurrentRandomnessRequest)(nil), "outbe.rand.QueryCurrentRandomnessRequest")
	proto.RegisterType((*QueryCurrentRandomnessResponse)(nil), "outbe.rand.QueryCurrentRandomnessResponse")
}

func init() { proto.RegisterFile("outbe/rand/query.proto", fileDescriptor_1022d5271aec4962) }

var fileDescriptor_1022d5271aec4962 = []byte{
	// 653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x4f, 0x6f, 0xd3, 0x4e,
	0x14, 0x8c, 0xfb, 0xeb, 0x2f, 0x55, 0x5e, 0xb9, 0xb0, 0xcd, 0x9f, 0xd6, 0xb4, 0x4e, 0x30, 0x08,
	0x95, 0x42, 0x63, 0x68, 0x25, 0xc4, 0x95, 0x80, 0xc4, 0x01, 0x09, 0x51, 0x8b, 0x03, 0xe2, 0x82,
	0x36, 0xcd, 0x2a, 0x58, 0x8a, 0xbd, 0x8e, 0xbd, 0xa9, 0x88, 0xaa, 0x5e, 0x38, 0x72, 0x42, 0xf0,
	0xa5, 0x7a, 0x8c, 0xc4, 0x85, 0x13, 0x42, 0x09, 0x1f, 0x04, 0x79, 0xf7, 0xd9, 0x5e, 0xcb, 0x49,
	0xc4, 0x25, 0xaa, 0xe6, 0x4d, 0x66, 0xa6, 0xef, 0xed, 0x28, 0xd0, 0xe4, 0x13, 0xd1, 0x67, 0x4e,
	0x44, 0x83, 0x81, 0x33, 0x9e, 0xb0, 0x68, 0xda, 0x0d, 0x23, 0x2e, 0x38, 0x01, 0x89, 0x77, 0x13,
	0xdc, 0xac, 0x0f, 0xf9, 0x90, 0x4b, 0xd8, 0x49, 0xfe, 0x52, 0x0c, 0x73, 0x7f, 0xc8, 0xf9, 0x70,
	0xc4, 0x1c, 0x1a, 0x7a, 0x0e, 0x0d, 0x02, 0x2e, 0xa8, 0xf0, 0x78, 0x10, 0xe3, 0xd4, 0xd4, 0x74,
	0x93, 0x8f, 0x58, 0x50, 0xc1, 0xd4, 0xcc, 0xae, 0x03, 0x39, 0x4b, 0xac, 0xde, 0xd0, 0x88, 0xfa,
	0xb1, 0xcb, 0xc6, 0x13, 0x16, 0x0b, 0xfb, 0x25, 0xec, 0x14, 0xd0, 0x38, 0xe4, 0x41, 0xcc, 0xc8,
	0x23, 0xa8, 0x86, 0x12, 0xd9, 0x35, 0x3a, 0xc6, 0xe1, 0xf6, 0x09, 0xe9, 0xe6, 0xc9, 0xba, 0x8a,
	0xdb, 0xdb, 0xbc, 0xfe, 0xd5, 0xae, 0xb8, 0xc8, 0xcb, 0xe5, 0x59, 0xe4, 0xf1, 0x41, 0x2a, 0xff,
	0x2c, 0x95, 0x47, 0x14, 0xe5, 0x8f, 0xa0, 0x1a, 0x4a, 0x64, 0xa9, 0xbc, 0xe2, 0x22, 0xc3, 0x7e,
	0x0d, 0x4d, 0x29, 0xf1, 0x9c, 0xfb, 0xbe, 0x27, 0x7c, 0x16, 0x08, 0x14, 0x27, 0xcd, 0x82, 0x4a,
	0x2d, 0xfd, 0x06, 0xd9, 0x87, 0xda, 0x05, 0x1d, 0x79, 0x03, 0x2a, 0x78, 0xb4, 0xbb, 0x21, 0x47,
	0x39, 0x60, 0x9f, 0x41, 0xab, 0xa4, 0x87, 0xb1, 0x9e, 0x00, 0x9c, 0x67, 0x28, 0x46, 0x6b, 0xea,
	0xd1, 0xb4, 0xef, 0x68, 0x4c, 0x7b, 0xaf, 0x24, 0x99, 0xed, 0xf7, 0x2d, 0xec, 0x96, 0x47, 0x68,
	0xf7, 0x14, 0xb6, 0x73, 0x91, 0x64, 0xd3, 0xff, 0xad, 0xf1, 0xd3, 0xa9, 0x76, 0x03, 0xd7, 0xea,
	0xb2, 0x0b, 0x46, 0x47, 0x99, 0xd9, 0x0b, 0xa8, 0x17, 0x61, 0x34, 0x7a, 0x08, 0x5b, 0x91, 0x82,
	0xd0, 0xa4, 0xb0, 0x6f, 0xc5, 0x76, 0x53, 0x8a, 0xdd, 0x82, 0x06, 0xde, 0x2c, 0xa0, 0x23, 0xe1,
	0xb1, 0x4c, 0xfe, 0x15, 0x5e, 0x42, 0x1b, 0xa0, 0xc1, 0x63, 0xa8, 0x85, 0x29, 0x88, 0x16, 0x3b,
	0xc5, 0x93, 0x26, 0xc3, 0xa9, 0x9b, 0xb3, 0xec, 0x36, 0x1c, 0xa8, 0xc5, 0x4c, 0xa2, 0x28, 0xf9,
	0xff, 0x68, 0x30, 0xe0, 0x7e, 0xc0, 0xe2, 0xcc, 0xed, 0x1d, 0x58, 0xab, 0x08, 0xe8, 0x5a, 0xbc,
	0xff, 0x66, 0x76, 0x7f, 0x0b, 0x20, 0xca, 0xd8, 0xf2, 0x01, 0xdc, 0x70, 0x35, 0xe4, 0x64, 0x56,
	0x85, 0xff, 0xa5, 0x34, 0x61, 0x50, 0x55, 0x8f, 0x99, 0x58, 0x7a, 0xdc, 0x72, 0x4f, 0xcc, 0xf6,
	0xca, 0xb9, 0x0a, 0x63, 0x9b, 0x9f, 0x7f, 0xfc, 0xf9, 0xbe, 0x51, 0x27, 0xc4, 0xd1, 0x3a, 0xa8,
	0xba, 0x21, 0x6d, 0x30, 0x5a, 0x59, 0x46, 0xef, 0xcb, 0x32, 0x9b, 0x42, 0x73, 0x56, 0xd8, 0x28,
	0xf1, 0x2f, 0x06, 0x40, 0xfe, 0x62, 0x88, 0x5d, 0xd2, 0x2a, 0x55, 0xc8, 0xbc, 0xb3, 0x96, 0x83,
	0x9e, 0xa7, 0xd2, 0xf3, 0x98, 0x3c, 0xd0, 0x3d, 0xf3, 0xe7, 0xe8, 0x5c, 0x2a, 0xff, 0x2b, 0xe7,
	0x32, 0x6b, 0xd9, 0x15, 0x99, 0xc2, 0xb6, 0xf6, 0xe6, 0xc9, 0x3a, 0xa3, 0x6c, 0xc9, 0x77, 0xd7,
	0x93, 0x30, 0x4e, 0x5b, 0xc6, 0xd9, 0x23, 0xad, 0xe5, 0x71, 0x62, 0xe2, 0xc1, 0x16, 0x36, 0x80,
	0x94, 0xf7, 0x59, 0xac, 0x8c, 0xd9, 0x59, 0x4d, 0x40, 0xbb, 0x5b, 0xd2, 0xae, 0x41, 0x76, 0x74,
	0x3b, 0xec, 0x0a, 0x19, 0x43, 0x2d, 0x6b, 0x03, 0xb9, 0xbd, 0xe4, 0x78, 0xc5, 0x0a, 0x99, 0xf6,
	0x3a, 0x0a, 0x1a, 0x1e, 0x48, 0xc3, 0x16, 0x69, 0x14, 0x4f, 0x9c, 0xba, 0x7c, 0x33, 0xe0, 0x66,
	0xa9, 0x13, 0xe4, 0x7e, 0x79, 0x75, 0x2b, 0x8a, 0x65, 0x1e, 0xfd, 0x0b, 0x15, 0xb3, 0xdc, 0x93,
	0x59, 0x3a, 0xc4, 0x2a, 0xec, 0x5a, 0xd1, 0x3f, 0xe4, 0x95, 0xea, 0xf5, 0xae, 0xe7, 0x96, 0x31,
	0x9b, 0x5b, 0xc6, 0xef, 0xb9, 0x65, 0x7c, 0x5d, 0x58, 0x95, 0xd9, 0xc2, 0xaa, 0xfc, 0x5c, 0x58,
	0x95, 0xf7, 0x87, 0x43, 0x4f, 0x7c, 0x9c, 0xf4, 0xbb, 0xe7, 0xdc, 0x47, 0x0d, 0xf9, 0x79, 0x1c,
	0xf0, 0x01, 0x73, 0x3e, 0x29, 0x41, 0x31, 0x0d, 0x59, 0xdc, 0xaf, 0xca, 0xdf, 0xa9, 0xd3, 0xbf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xac, 0xb8, 0xa7, 0xd9, 0x1d, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	Period(ctx context.Context, in *QueryPeriodRequest, opts ...grpc.CallOption) (*QueryPeriodResponse, error)
	Commitment(ctx context.Context, in *QueryCommitmentRequest, opts ...grpc.CallOption) (*QueryCommitmentResponse, error)
	Commitments(ctx context.Context, in *QueryCommitmentsRequest, opts ...grpc.CallOption) (*QueryCommitmentsResponse, error)
	Reveals(ctx context.Context, in *QueryRevealsRequest, opts ...grpc.CallOption) (*QueryRevealsResponse, error)
	Penalties(ctx context.Context, in *QueryPenaltiesRequest, opts ...grpc.CallOption) (*QueryPenaltiesResponse, error)
	CurrentRandomness(ctx context.Context, in *QueryCurrentRandomnessRequest, opts ...grpc.CallOption) (*QueryCurrentRandomnessResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/outbe.rand.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Period(ctx context.Context, in *QueryPeriodRequest, opts ...grpc.CallOption) (*QueryPeriodResponse, error) {
	out := new(QueryPeriodResponse)
	err := c.cc.Invoke(ctx, "/outbe.rand.Query/Period", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Commitment(ctx context.Context, in *QueryCommitmentRequest, opts ...grpc.CallOption) (*QueryCommitmentResponse, error) {
	out := new(QueryCommitmentResponse)
	err := c.cc.Invoke(ctx, "/outbe.rand.Query/Commitment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Commitments(ctx context.Context, in *QueryCommitmentsRequest, opts ...grpc.CallOption) (*QueryCommitmentsResponse, error) {
	out := new(QueryCommitmentsResponse)
	err := c.cc.Invoke(ctx, "/outbe.rand.Query/Commitments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Reveals(ctx context.Context, in *QueryRevealsRequest, opts ...grpc.CallOption) (*QueryRevealsResponse, error) {
	out := new(QueryRevealsResponse)
	err := c.cc.Invoke(ctx, "/outbe.rand.Query/Reveals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Penalties(ctx context.Context, in *QueryPenaltiesRequest, opts ...grpc.CallOption) (*QueryPenaltiesResponse, error) {
	out := new(QueryPenaltiesResponse)
	err := c.cc.Invoke(ctx, "/outbe.rand.Query/Penalties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentRandomness(ctx context.Context, in *QueryCurrentRandomnessRequest, opts ...grpc.CallOption) (*QueryCurrentRandomnessResponse, error) {
	out := new(QueryCurrentRandomnessResponse)
	err := c.cc.Invoke(ctx, "/outbe.rand.Query/CurrentRandomness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	Period(context.Context, *QueryPeriodRequest) (*QueryPeriodResponse, error)
	Commitment(context.Context, *QueryCommitmentRequest) (*QueryCommitmentResponse, error)
	Commitments(context.Context, *QueryCommitmentsRequest) (*QueryCommitmentsResponse, error)
	Reveals(context.Context, *QueryRevealsRequest) (*QueryRevealsResponse, error)
	Penalties(context.Context, *QueryPenaltiesRequest) (*QueryPenaltiesResponse, error)
	CurrentRandomness(context.Context, *QueryCurrentRandomnessRequest) (*QueryCurrentRandomnessResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Period(ctx context.Context, req *QueryPeriodRequest) (*QueryPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Period not implemented")
}
func (*UnimplementedQueryServer) Commitment(ctx context.Context, req *QueryCommitmentRequest) (*QueryCommitmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commitment not implemented")
}
func (*UnimplementedQueryServer) Commitments(ctx context.Context, req *QueryCommitmentsRequest) (*QueryCommitmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commitments not implemented")
}
func (*UnimplementedQueryServer) Reveals(ctx context.Context, req *QueryRevealsRequest) (*QueryRevealsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reveals not implemented")
}
func (*UnimplementedQueryServer) Penalties(ctx context.Context, req *QueryPenaltiesRequest) (*QueryPenaltiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Penalties not implemented")
}
func (*UnimplementedQueryServer) CurrentRandomness(ctx context.Context, req *QueryCurrentRandomnessRequest) (*QueryCurrentRandomnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentRandomness not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/outbe.rand.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Period_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Period(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/outbe.rand.Query/Period",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Period(ctx, req.(*QueryPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Commitment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommitmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Commitment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/outbe.rand.Query/Commitment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Commitment(ctx, req.(*QueryCommitmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Commitments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCommitmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Commitments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/outbe.rand.Query/Commitments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Commitments(ctx, req.(*QueryCommitmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Reveals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRevealsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Reveals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/outbe.rand.Query/Reveals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Reveals(ctx, req.(*QueryRevealsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Penalties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPenaltiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Penalties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/outbe.rand.Query/Penalties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Penalties(ctx, req.(*QueryPenaltiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentRandomness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentRandomnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentRandomness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/outbe.rand.Query/CurrentRandomness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentRandomness(ctx, req.(*QueryCurrentRandomnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "outbe.rand.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Period",
			Handler:    _Query_Period_Handler,
		},
		{
			MethodName: "Commitment",
			Handler:    _Query_Commitment_Handler,
		},
		{
			MethodName: "Commitments",
			Handler:    _Query_Commitments_Handler,
		},
		{
			MethodName: "Reveals",
			Handler:    _Query_Reveals_Handler,
		},
		{
			MethodName: "Penalties",
			Handler:    _Query_Penalties_Handler,
		},
		{
			MethodName: "CurrentRandomness",
			Handler:    _Query_CurrentRandomness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "outbe/rand/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPeriodRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPeriodRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPeriodRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPeriodResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPeriodResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPeriodResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Period != nil {
		{
			size, err := m.Period.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCommitmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommitmentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommitmentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Period) > 0 {
		i -= len(m.Period)
		copy(dAtA[i:], m.Period)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Period)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCommitmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommitmentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommitmentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Commitment != nil {
		{
			size, err := m.Commitment.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCommitmentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommitmentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommitmentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCommitmentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCommitmentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCommitmentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commitments) > 0 {
		for iNdEx := len(m.Commitments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commitments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRevealsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRevealsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRevealsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRevealsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRevealsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRevealsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reveals) > 0 {
		for iNdEx := len(m.Reveals) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reveals[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPenaltiesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPenaltiesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPenaltiesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPenaltiesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPenaltiesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPenaltiesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Penalties) > 0 {
		for iNdEx := len(m.Penalties) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Penalties[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCurrentRandomnessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentRandomnessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentRandomnessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCurrentRandomnessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentRandomnessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentRandomnessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Randomness) > 0 {
		i -= len(m.Randomness)
		copy(dAtA[i:], m.Randomness)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Randomness)))
		i--
		dAtA[i] = 0x12
	}
	if m.Period != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPeriodRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPeriodResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Period != nil {
		l = m.Period.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCommitmentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Period)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCommitmentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Commitment != nil {
		l = m.Commitment.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCommitmentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCommitmentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Commitments) > 0 {
		for _, e := range m.Commitments {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRevealsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRevealsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Reveals) > 0 {
		for _, e := range m.Reveals {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPenaltiesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPenaltiesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Penalties) > 0 {
		for _, e := range m.Penalties {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCurrentRandomnessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCurrentRandomnessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Period != 0 {
		n += 1 + sovQuery(uint64(m.Period))
	}
	l = len(m.Randomness)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPeriodRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPeriodRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPeriodRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPeriodResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPeriodResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPeriodResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Period == nil {
				m.Period = &Period{}
			}
			if err := m.Period.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommitmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommitmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommitmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Period = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommitmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommitmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommitmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Commitment == nil {
				m.Commitment = &Commitment{}
			}
			if err := m.Commitment.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommitmentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommitmentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommitmentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCommitmentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCommitmentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCommitmentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitments = append(m.Commitments, &Commitment{})
			if err := m.Commitments[len(m.Commitments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRevealsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRevealsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRevealsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRevealsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRevealsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRevealsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reveals", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reveals = append(m.Reveals, &Reveal{})
			if err := m.Reveals[len(m.Reveals)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPenaltiesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPenaltiesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPenaltiesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPenaltiesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPenaltiesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPenaltiesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Penalties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Penalties = append(m.Penalties, &Penalty{})
			if err := m.Penalties[len(m.Penalties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentRandomnessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentRandomnessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentRandomnessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentRandomnessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentRandomnessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentRandomnessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Randomness", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Randomness = append(m.Randomness[:0], dAtA[iNdEx:postIndex]...)
			if m.Randomness == nil {
				m.Randomness = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
