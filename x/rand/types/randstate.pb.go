// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outbe/rand/randstate.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Period struct {
	Block             uint64 `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
	CurrentPeriod     uint64 `protobuf:"varint,2,opt,name=current_period,json=currentPeriod,proto3" json:"current_period,omitempty"`
	PeriodStartHeight int64  `protobuf:"varint,3,opt,name=period_start_height,json=periodStartHeight,proto3" json:"period_start_height,omitempty"`
	CurrentSeed       []byte `protobuf:"bytes,4,opt,name=current_seed,json=currentSeed,proto3" json:"current_seed,omitempty"`
	InCommitPhase     bool   `protobuf:"varint,5,opt,name=in_commit_phase,json=inCommitPhase,proto3" json:"in_commit_phase,omitempty"`
	CommitEndHeight   int64  `protobuf:"varint,6,opt,name=commit_end_height,json=commitEndHeight,proto3" json:"commit_end_height,omitempty"`
	RevealEndHeight   int64  `protobuf:"varint,7,opt,name=reveal_end_height,json=revealEndHeight,proto3" json:"reveal_end_height,omitempty"`
}

func (m *Period) Reset()         { *m = Period{} }
func (m *Period) String() string { return proto.CompactTextString(m) }
func (*Period) ProtoMessage()    {}
func (*Period) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a5726a6bc569a5a, []int{0}
}
func (m *Period) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Period) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Period.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Period) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Period.Merge(m, src)
}
func (m *Period) XXX_Size() int {
	return m.Size()
}
func (m *Period) XXX_DiscardUnknown() {
	xxx_messageInfo_Period.DiscardUnknown(m)
}

var xxx_messageInfo_Period proto.InternalMessageInfo

func (m *Period) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *Period) GetCurrentPeriod() uint64 {
	if m != nil {
		return m.CurrentPeriod
	}
	return 0
}

func (m *Period) GetPeriodStartHeight() int64 {
	if m != nil {
		return m.PeriodStartHeight
	}
	return 0
}

func (m *Period) GetCurrentSeed() []byte {
	if m != nil {
		return m.CurrentSeed
	}
	return nil
}

func (m *Period) GetInCommitPhase() bool {
	if m != nil {
		return m.InCommitPhase
	}
	return false
}

func (m *Period) GetCommitEndHeight() int64 {
	if m != nil {
		return m.CommitEndHeight
	}
	return 0
}

func (m *Period) GetRevealEndHeight() int64 {
	if m != nil {
		return m.RevealEndHeight
	}
	return 0
}

type Commitment struct {
	Period         uint64      `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
	Validator      string      `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	CommitmentHash []byte      `protobuf:"bytes,3,opt,name=commitment_hash,json=commitmentHash,proto3" json:"commitment_hash,omitempty"`
	BlockHeight    int64       `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	Revealed       bool        `protobuf:"varint,5,opt,name=revealed,proto3" json:"revealed,omitempty"`
	Deposit        *types.Coin `protobuf:"bytes,6,opt,name=deposit,proto3" json:"deposit,omitempty"`
}

func (m *Commitment) Reset()         { *m = Commitment{} }
func (m *Commitment) String() string { return proto.CompactTextString(m) }
func (*Commitment) ProtoMessage()    {}
func (*Commitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a5726a6bc569a5a, []int{1}
}
func (m *Commitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Commitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Commitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Commitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Commitment.Merge(m, src)
}
func (m *Commitment) XXX_Size() int {
	return m.Size()
}
func (m *Commitment) XXX_DiscardUnknown() {
	xxx_messageInfo_Commitment.DiscardUnknown(m)
}

var xxx_messageInfo_Commitment proto.InternalMessageInfo

func (m *Commitment) GetPeriod() uint64 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *Commitment) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *Commitment) GetCommitmentHash() []byte {
	if m != nil {
		return m.CommitmentHash
	}
	return nil
}

func (m *Commitment) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Commitment) GetRevealed() bool {
	if m != nil {
		return m.Revealed
	}
	return false
}

func (m *Commitment) GetDeposit() *types.Coin {
	if m != nil {
		return m.Deposit
	}
	return nil
}

type Reveal struct {
	Period      uint64 `protobuf:"varint,1,opt,name=period,proto3" json:"period,omitempty"`
	Validator   string `protobuf:"bytes,2,opt,name=validator,proto3" json:"validator,omitempty"`
	RevealValue []byte `protobuf:"bytes,3,opt,name=reveal_value,json=revealValue,proto3" json:"reveal_value,omitempty"`
	BlockHeight int64  `protobuf:"varint,4,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *Reveal) Reset()         { *m = Reveal{} }
func (m *Reveal) String() string { return proto.CompactTextString(m) }
func (*Reveal) ProtoMessage()    {}
func (*Reveal) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a5726a6bc569a5a, []int{2}
}
func (m *Reveal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reveal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reveal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reveal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reveal.Merge(m, src)
}
func (m *Reveal) XXX_Size() int {
	return m.Size()
}
func (m *Reveal) XXX_DiscardUnknown() {
	xxx_messageInfo_Reveal.DiscardUnknown(m)
}

var xxx_messageInfo_Reveal proto.InternalMessageInfo

func (m *Reveal) GetPeriod() uint64 {
	if m != nil {
		return m.Period
	}
	return 0
}

func (m *Reveal) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *Reveal) GetRevealValue() []byte {
	if m != nil {
		return m.RevealValue
	}
	return nil
}

func (m *Reveal) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type Params struct {
	CommitPeriod   uint64      `protobuf:"varint,1,opt,name=commit_period,json=commitPeriod,proto3" json:"commit_period,omitempty"`
	RevealPeriod   uint64      `protobuf:"varint,2,opt,name=reveal_period,json=revealPeriod,proto3" json:"reveal_period,omitempty"`
	MinimumDeposit *types.Coin `protobuf:"bytes,3,opt,name=minimum_deposit,json=minimumDeposit,proto3" json:"minimum_deposit,omitempty"`
	PenaltyAmount  *types.Coin `protobuf:"bytes,4,opt,name=penalty_amount,json=penaltyAmount,proto3" json:"penalty_amount,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a5726a6bc569a5a, []int{3}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetCommitPeriod() uint64 {
	if m != nil {
		return m.CommitPeriod
	}
	return 0
}

func (m *Params) GetRevealPeriod() uint64 {
	if m != nil {
		return m.RevealPeriod
	}
	return 0
}

func (m *Params) GetMinimumDeposit() *types.Coin {
	if m != nil {
		return m.MinimumDeposit
	}
	return nil
}

func (m *Params) GetPenaltyAmount() *types.Coin {
	if m != nil {
		return m.PenaltyAmount
	}
	return nil
}

func init() {
	proto.RegisterType((*Period)(nil), "outbe.rand.Period")
	proto.RegisterType((*Commitment)(nil), "outbe.rand.Commitment")
	proto.RegisterType((*Reveal)(nil), "outbe.rand.Reveal")
	proto.RegisterType((*Params)(nil), "outbe.rand.Params")
}

func init() { proto.RegisterFile("outbe/rand/randstate.proto", fileDescriptor_4a5726a6bc569a5a) }

var fileDescriptor_4a5726a6bc569a5a = []byte{
	// 542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0x9b, 0xd4, 0x6d, 0x6f, 0xfe, 0x94, 0xf9, 0xaa, 0x4f, 0x21, 0x42, 0x56, 0x9a, 0x0a,
	0x88, 0x2a, 0x61, 0xab, 0xf4, 0x05, 0x20, 0x05, 0xa9, 0xcb, 0xc8, 0x95, 0x58, 0xb0, 0xb1, 0xc6,
	0xf6, 0x55, 0x3c, 0x22, 0x9e, 0xb1, 0x3c, 0xe3, 0x88, 0xee, 0x79, 0x00, 0x96, 0x3c, 0x12, 0xcb,
	0x2e, 0xbb, 0x03, 0x25, 0x2f, 0x82, 0x3c, 0x33, 0x6e, 0xcb, 0x06, 0x10, 0x1b, 0xcb, 0x73, 0xce,
	0x99, 0xb9, 0xe7, 0x9e, 0x3b, 0x03, 0x13, 0x51, 0xa9, 0x18, 0x83, 0x92, 0xf2, 0x54, 0x7f, 0xa4,
	0xa2, 0x0a, 0xfd, 0xa2, 0x14, 0x4a, 0x10, 0xd0, 0x9c, 0x5f, 0xc3, 0x93, 0xe3, 0x95, 0x58, 0x09,
	0x0d, 0x07, 0xf5, 0x9f, 0x51, 0x4c, 0xbc, 0x44, 0xc8, 0x5c, 0xc8, 0x20, 0xa6, 0x12, 0x83, 0xcd,
	0x79, 0x8c, 0x8a, 0x9e, 0x07, 0x89, 0x60, 0xdc, 0xf0, 0xb3, 0xaf, 0x7b, 0xe0, 0x2e, 0xb1, 0x64,
	0x22, 0x25, 0xc7, 0xb0, 0x1f, 0xaf, 0x45, 0xf2, 0x71, 0xec, 0x4c, 0x9d, 0x79, 0x27, 0x34, 0x0b,
	0xf2, 0x0c, 0x06, 0x49, 0x55, 0x96, 0xc8, 0x55, 0x54, 0x68, 0xdd, 0x78, 0x4f, 0xd3, 0x7d, 0x8b,
	0xda, 0xcd, 0x3e, 0xfc, 0x67, 0xe8, 0x48, 0x2a, 0x5a, 0xaa, 0x28, 0x43, 0xb6, 0xca, 0xd4, 0xb8,
	0x3d, 0x75, 0xe6, 0xed, 0x70, 0x64, 0xa8, 0xeb, 0x9a, 0xb9, 0xd2, 0x04, 0x39, 0x81, 0x5e, 0x73,
	0xac, 0x44, 0x4c, 0xc7, 0x9d, 0xa9, 0x33, 0xef, 0x85, 0x5d, 0x8b, 0x5d, 0x23, 0xa6, 0xe4, 0x39,
	0x0c, 0x19, 0x8f, 0x12, 0x91, 0xe7, 0x4c, 0x45, 0x45, 0x46, 0x25, 0x8e, 0xf7, 0xa7, 0xce, 0xfc,
	0x30, 0xec, 0x33, 0x7e, 0xa9, 0xd1, 0x65, 0x0d, 0x92, 0x33, 0x18, 0x59, 0x11, 0xf2, 0xb4, 0x29,
	0xec, 0xea, 0xc2, 0x43, 0x43, 0xbc, 0xe3, 0xa9, 0x2d, 0x7b, 0x06, 0xa3, 0x12, 0x37, 0x48, 0xd7,
	0x8f, 0xb5, 0x07, 0x46, 0x6b, 0x88, 0x7b, 0xed, 0xec, 0xbb, 0x03, 0x60, 0xea, 0xe4, 0xc8, 0x15,
	0xf9, 0x1f, 0x5c, 0x1b, 0x80, 0xc9, 0xc7, 0xae, 0xc8, 0x53, 0x38, 0xda, 0xd0, 0x35, 0x4b, 0xa9,
	0x12, 0xa5, 0xce, 0xe6, 0x28, 0x7c, 0x00, 0xc8, 0x0b, 0xb0, 0x1e, 0xea, 0x33, 0xa2, 0x8c, 0xca,
	0x4c, 0x67, 0xd2, 0x0b, 0x07, 0x0f, 0xf0, 0x15, 0x95, 0x59, 0x1d, 0x88, 0x0e, 0xbc, 0x31, 0xd5,
	0xd1, 0xa6, 0xba, 0x1a, 0xb3, 0xe6, 0x27, 0x70, 0x68, 0x3c, 0x62, 0x6a, 0x93, 0xb8, 0x5f, 0x93,
	0x0b, 0x38, 0x48, 0xb1, 0x10, 0x92, 0x99, 0xd6, 0xbb, 0xaf, 0x9e, 0xf8, 0x66, 0xf2, 0x7e, 0x3d,
	0x79, 0xdf, 0x4e, 0xde, 0xbf, 0x14, 0x8c, 0x87, 0x8d, 0x72, 0xf6, 0xd9, 0x01, 0x37, 0xd4, 0x27,
	0xfc, 0x63, 0x77, 0x27, 0xd0, 0xb3, 0x71, 0x6e, 0xe8, 0xba, 0x42, 0xdb, 0x5a, 0xd7, 0x60, 0xef,
	0x6b, 0xe8, 0x2f, 0xfa, 0x9a, 0xdd, 0x39, 0xe0, 0x2e, 0x69, 0x49, 0x73, 0x49, 0x4e, 0xa1, 0xdf,
	0x0c, 0xfc, 0xb1, 0x9b, 0x9e, 0x01, 0xed, 0x5d, 0x3b, 0x85, 0xbe, 0xad, 0xfa, 0xcb, 0x8d, 0xb4,
	0x56, 0xac, 0x68, 0x01, 0xc3, 0x9c, 0x71, 0x96, 0x57, 0x79, 0xd4, 0x04, 0xd3, 0xfe, 0x53, 0x30,
	0x03, 0xbb, 0xe3, 0xad, 0xd9, 0x40, 0x5e, 0xc3, 0xa0, 0x40, 0x4e, 0xd7, 0xea, 0x26, 0xa2, 0xb9,
	0xa8, 0xb8, 0x71, 0xff, 0xdb, 0x23, 0xfa, 0x76, 0xc3, 0x1b, 0xad, 0x5f, 0x2c, 0xbe, 0x6d, 0x3d,
	0xe7, 0x76, 0xeb, 0x39, 0x3f, 0xb6, 0x9e, 0xf3, 0x65, 0xe7, 0xb5, 0x6e, 0x77, 0x5e, 0xeb, 0x6e,
	0xe7, 0xb5, 0x3e, 0xcc, 0x57, 0x4c, 0x65, 0x55, 0xec, 0x27, 0x22, 0x0f, 0xcc, 0x0b, 0xd7, 0xdf,
	0x97, 0x5c, 0xa4, 0x18, 0x7c, 0x32, 0xcf, 0x5d, 0xdd, 0x14, 0x28, 0x63, 0x57, 0xbf, 0xd4, 0x8b,
	0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8f, 0xd9, 0x94, 0x9d, 0x09, 0x04, 0x00, 0x00,
}

func (m *Period) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Period) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Period) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RevealEndHeight != 0 {
		i = encodeVarintRandstate(dAtA, i, uint64(m.RevealEndHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.CommitEndHeight != 0 {
		i = encodeVarintRandstate(dAtA, i, uint64(m.CommitEndHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.InCommitPhase {
		i--
		if m.InCommitPhase {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.CurrentSeed) > 0 {
		i -= len(m.CurrentSeed)
		copy(dAtA[i:], m.CurrentSeed)
		i = encodeVarintRandstate(dAtA, i, uint64(len(m.CurrentSeed)))
		i--
		dAtA[i] = 0x22
	}
	if m.PeriodStartHeight != 0 {
		i = encodeVarintRandstate(dAtA, i, uint64(m.PeriodStartHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.CurrentPeriod != 0 {
		i = encodeVarintRandstate(dAtA, i, uint64(m.CurrentPeriod))
		i--
		dAtA[i] = 0x10
	}
	if m.Block != 0 {
		i = encodeVarintRandstate(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Commitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Commitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Commitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Deposit != nil {
		{
			size, err := m.Deposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRandstate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Revealed {
		i--
		if m.Revealed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.BlockHeight != 0 {
		i = encodeVarintRandstate(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CommitmentHash) > 0 {
		i -= len(m.CommitmentHash)
		copy(dAtA[i:], m.CommitmentHash)
		i = encodeVarintRandstate(dAtA, i, uint64(len(m.CommitmentHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintRandstate(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Period != 0 {
		i = encodeVarintRandstate(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Reveal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reveal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reveal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintRandstate(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RevealValue) > 0 {
		i -= len(m.RevealValue)
		copy(dAtA[i:], m.RevealValue)
		i = encodeVarintRandstate(dAtA, i, uint64(len(m.RevealValue)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintRandstate(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Period != 0 {
		i = encodeVarintRandstate(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PenaltyAmount != nil {
		{
			size, err := m.PenaltyAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRandstate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.MinimumDeposit != nil {
		{
			size, err := m.MinimumDeposit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRandstate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.RevealPeriod != 0 {
		i = encodeVarintRandstate(dAtA, i, uint64(m.RevealPeriod))
		i--
		dAtA[i] = 0x10
	}
	if m.CommitPeriod != 0 {
		i = encodeVarintRandstate(dAtA, i, uint64(m.CommitPeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRandstate(dAtA []byte, offset int, v uint64) int {
	offset -= sovRandstate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Period) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != 0 {
		n += 1 + sovRandstate(uint64(m.Block))
	}
	if m.CurrentPeriod != 0 {
		n += 1 + sovRandstate(uint64(m.CurrentPeriod))
	}
	if m.PeriodStartHeight != 0 {
		n += 1 + sovRandstate(uint64(m.PeriodStartHeight))
	}
	l = len(m.CurrentSeed)
	if l > 0 {
		n += 1 + l + sovRandstate(uint64(l))
	}
	if m.InCommitPhase {
		n += 2
	}
	if m.CommitEndHeight != 0 {
		n += 1 + sovRandstate(uint64(m.CommitEndHeight))
	}
	if m.RevealEndHeight != 0 {
		n += 1 + sovRandstate(uint64(m.RevealEndHeight))
	}
	return n
}

func (m *Commitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Period != 0 {
		n += 1 + sovRandstate(uint64(m.Period))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovRandstate(uint64(l))
	}
	l = len(m.CommitmentHash)
	if l > 0 {
		n += 1 + l + sovRandstate(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovRandstate(uint64(m.BlockHeight))
	}
	if m.Revealed {
		n += 2
	}
	if m.Deposit != nil {
		l = m.Deposit.Size()
		n += 1 + l + sovRandstate(uint64(l))
	}
	return n
}

func (m *Reveal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Period != 0 {
		n += 1 + sovRandstate(uint64(m.Period))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovRandstate(uint64(l))
	}
	l = len(m.RevealValue)
	if l > 0 {
		n += 1 + l + sovRandstate(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovRandstate(uint64(m.BlockHeight))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CommitPeriod != 0 {
		n += 1 + sovRandstate(uint64(m.CommitPeriod))
	}
	if m.RevealPeriod != 0 {
		n += 1 + sovRandstate(uint64(m.RevealPeriod))
	}
	if m.MinimumDeposit != nil {
		l = m.MinimumDeposit.Size()
		n += 1 + l + sovRandstate(uint64(l))
	}
	if m.PenaltyAmount != nil {
		l = m.PenaltyAmount.Size()
		n += 1 + l + sovRandstate(uint64(l))
	}
	return n
}

func sovRandstate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRandstate(x uint64) (n int) {
	return sovRandstate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Period) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandstate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Period: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Period: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentPeriod", wireType)
			}
			m.CurrentPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PeriodStartHeight", wireType)
			}
			m.PeriodStartHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PeriodStartHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRandstate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRandstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentSeed = append(m.CurrentSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentSeed == nil {
				m.CurrentSeed = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InCommitPhase", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InCommitPhase = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitEndHeight", wireType)
			}
			m.CommitEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealEndHeight", wireType)
			}
			m.RevealEndHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevealEndHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRandstate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRandstate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Commitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandstate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Commitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Commitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandstate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitmentHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRandstate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRandstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommitmentHash = append(m.CommitmentHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CommitmentHash == nil {
				m.CommitmentHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revealed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revealed = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRandstate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRandstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Deposit == nil {
				m.Deposit = &types.Coin{}
			}
			if err := m.Deposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandstate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRandstate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Reveal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandstate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reveal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reveal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRandstate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRandstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealValue", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRandstate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRandstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevealValue = append(m.RevealValue[:0], dAtA[iNdEx:postIndex]...)
			if m.RevealValue == nil {
				m.RevealValue = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRandstate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRandstate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRandstate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommitPeriod", wireType)
			}
			m.CommitPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommitPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevealPeriod", wireType)
			}
			m.RevealPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevealPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumDeposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRandstate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRandstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MinimumDeposit == nil {
				m.MinimumDeposit = &types.Coin{}
			}
			if err := m.MinimumDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PenaltyAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRandstate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRandstate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PenaltyAmount == nil {
				m.PenaltyAmount = &types.Coin{}
			}
			if err := m.PenaltyAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRandstate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRandstate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRandstate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRandstate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRandstate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRandstate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRandstate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRandstate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRandstate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRandstate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRandstate = fmt.Errorf("proto: unexpected end of group")
)
